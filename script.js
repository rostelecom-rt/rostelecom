let currentIndex = 0;
const cards = document.querySelectorAll('.tariff');

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤
function showCard(index) {
    const isMobile = window.innerWidth <= 768;
    const cardsToShow = isMobile ? 1 : 3;

    cards.forEach((card, i) => {
        card.classList.toggle('active', i >= index && i < index + cardsToShow);
    });
}

function nextCard() {
    const isMobile = window.innerWidth <= 768;
    const cardsToShow = isMobile ? 1 : 3;
    if (currentIndex + cardsToShow < cards.length) currentIndex++;
    showCard(currentIndex);
}

function prevCard() {
    if (currentIndex > 0) currentIndex--;
    showCard(currentIndex);
}

function selectTariff(tariff, discount, description, isMainTariff = true) {
    const mainTariffInput = document.getElementById("main-tariff");
    const tariffInput = document.getElementById("tariff");
    
    if (isMainTariff) {
        mainTariffInput.value = `${tariff} - ${discount} (${description})`;
        tariffInput.value = tariffInput.value.includes("–í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ") 
            ? `${mainTariffInput.value} + –í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ` 
            : mainTariffInput.value;
    } else {
        if (!mainTariffInput.value) {
            alert("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞—Ä–∏—Ñ!");
            return;
        }
        tariffInput.value = `${mainTariffInput.value} + ${tariff} - ${discount} (${description})`;
    }

    if (window.innerWidth <= 768) {
        document.getElementById("application-form").scrollIntoView({
            behavior: "smooth",
            block: "start"
        });
    }
}

// –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –í TELEGRAM
async function sendToTelegram(formData) {
    const BOT_TOKEN = '7628185270:AAEeK69bRl6iKxlQIApVRcV9RUsutuNSMAA';
    const CHAT_ID = '968338148';
    
    const message = `üöÄ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞:\n\n` +
                   `üë§ –ò–º—è: ${formData.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                   `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}\n` +
                   `üè† –ê–¥—Ä–µ—Å: ${formData.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                   `üíé –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞—Ä–∏—Ñ: ${formData.main_tariff}\n` +
                   `üìù –ü–æ–ª–Ω—ã–π —Ç–∞—Ä–∏—Ñ: ${formData.tariff}\n` +
                   `‚è∞ –î–∞—Ç–∞: ${formData.date}\n\n` +
                   `‚ùóÔ∏è–°—Ä–æ—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å!`;

    try {
        // –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏
        const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: CHAT_ID,
                text: message,
                parse_mode: 'Markdown'
            })
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ Telegram API');
        }

        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
        
        // –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ FormData
        try {
            const form = new FormData();
            form.append('chat_id', CHAT_ID);
            form.append('text', message);
            
            const backupResponse = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
                method: 'POST',
                body: form
            });

            return backupResponse.ok;
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:', e);
            return false;
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ GAS
async function sendViaGAS(formData) {
    const GAS_URL = "https://script.google.com/macros/s/AKfycbxVXWpL5p0Bt9-pEzcTUcnybKa1eKzcLMfSK_te4zFV3UhY-krE0G0-XO_4g9s1IENybw/exec";
    
    try {
        const params = new URLSearchParams();
        for (const key in formData) {
            params.append(key, formData[key] || '');
        }

        await fetch(`${GAS_URL}?${params.toString()}`, {
            method: 'GET',
            mode: 'no-cors',
            cache: 'no-store'
        });

        await new Promise(resolve => setTimeout(resolve, 1000));
        return true;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ GAS:", error);
        return false;
    }
}

// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò
async function submitForm(event) {
    event.preventDefault();
    
    const form = event.target;
    const submitBtn = form.querySelector('button[type="submit"]');
    const phoneInput = document.getElementById("phone");
    const mainTariff = document.getElementById("main-tariff").value;
    const tariffInput = document.getElementById("tariff").value;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    if (!mainTariff || (tariffInput.includes("–í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ") && !mainTariff)) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞—Ä–∏—Ñ!');
        return false;
    }
    
    if (!/^[\d\+]{10,15}$/.test(phoneInput.value)) {
        alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä (10-15 —Ü–∏—Ñ—Ä)');
        phoneInput.focus();
        return false;
    }

    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏
    if (submitBtn) {
        submitBtn.disabled = true;
        submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
    }

    const formData = {
        tariff: tariffInput,
        main_tariff: mainTariff,
        address: document.getElementById("address").value,
        name: document.getElementById("name").value,
        phone: phoneInput.value,
        date: new Date().toLocaleString()
    };

    try {
        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –∏ GAS
        const [telegramSuccess, gasSuccess] = await Promise.all([
            sendToTelegram(formData),
            sendViaGAS(formData)
        ]);

        if (!telegramSuccess) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram');
        }

        showSuccess();
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
        showError();
    } finally {
        if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.textContent = '–ü–æ–¥–∫–ª—é—á–∏—Ç—å';
        }
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function showSuccess() {
    const modal = document.getElementById('successModal');
    if (!modal) return;
    modal.style.display = 'flex';
    setTimeout(() => {
        modal.style.display = 'none';
        resetForm();
    }, 5000);
}

function showError() {
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º: +7 (991) 424-23-37");
}

function resetForm() {
    ["address", "name", "phone", "main-tariff", "tariff"].forEach(id => {
        document.getElementById(id).value = "";
    });
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
document.querySelector('.close')?.addEventListener('click', () => {
    const modal = document.getElementById('successModal');
    if (modal) modal.style.display = 'none';
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
showCard(currentIndex);
